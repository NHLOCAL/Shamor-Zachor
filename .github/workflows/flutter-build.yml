# קובץ: .github/workflows/build.yml
name: Build Flutter APK + EXE & Create Release

on:
  push:
    branches:
      - main
      - dev
      - release/*
    tags: # הפעל על כל תג (למשל, 0.6.0, 1.0.0, v1.0.1)
      - '*' # ניתן לצמצם לתבנית ספציפית כמו 'v*' או '[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  android:
    name: Build Android APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.1' # או הגרסה היציבה העדכנית ביותר/הגרסה שלך
          channel: 'stable'

      - name: Install Dependencies
        working-directory: src
        run: flutter pub get

      # אופציונלי: הרצת טסטים
      # - name: Run Flutter Tests
      #   working-directory: src
      #   run: flutter test

      - name: Build Android APK
        working-directory: src
        run: flutter build apk --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-artifact # שם ייחודי לארטיפקט
          path: src/build/app/outputs/flutter-apk/app-release.apk

  windows:
    name: Build Windows EXE
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.1' # אותה גרסה כמו באנדרואיד
          channel: 'stable'

      - name: Install Dependencies
        working-directory: src
        run: flutter pub get

      # אופציונלי: הרצת טסטים
      # - name: Run Flutter Tests
      #   working-directory: src
      #   run: flutter test

      - name: Build Windows EXE
        working-directory: src
        run: flutter build windows --release

      - name: Zip Windows Release
        working-directory: src # קובץ ה-ZIP ייווצר ב-src/windows-release.zip
        run: |
          Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath windows-release.zip

      - name: Upload Windows ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip-artifact # שם ייחודי לארטיפקט
          path: src/windows-release.zip

  publish-release:
    name: Publish GitHub Release
    if: startsWith(github.ref, 'refs/tags/') # הרץ רק כאשר נוצר תג
    needs: [android, windows] # הרץ רק לאחר ששני ה-jobs הקודמים הסתיימו בהצלחה
    runs-on: ubuntu-latest
    permissions:
      contents: write # הרשאה נדרשת ליצירת Release

    steps:
      - name: Download Android APK artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk-artifact
          path: artifacts/android # הורד לתיקייה זמנית

      - name: Download Windows ZIP artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-zip-artifact
          path: artifacts/windows # הורד לתיקייה זמנית

      - name: Prepare Release Assets and Rename
        id: prepare_assets # נותן ID לשלב כדי שנוכל להתייחס ל-outputs שלו אם נרצה
        env:
          # github.ref_name יכיל את שם התג, לדוגמה "0.6.0" או "v0.6.0"
          # אם התג הוא "v0.6.0" ואתה רוצה "0.6.0", תצטרך עיבוד נוסף.
          # כרגע נשתמש בשם התג כפי שהוא.
          TAG_VERSION: ${{ github.ref_name }}
        run: |
          APK_ORIGINAL_PATH="artifacts/android/app-release.apk"
          APK_NEW_NAME="shamor-vezachor-${TAG_VERSION}.apk"
          APK_NEW_PATH="artifacts/android/${APK_NEW_NAME}"

          ZIP_ORIGINAL_PATH="artifacts/windows/windows-release.zip"
          ZIP_NEW_NAME="shamor-vezachor-${TAG_VERSION}.zip"
          ZIP_NEW_PATH="artifacts/windows/${ZIP_NEW_NAME}"

          echo "Renaming APK: ${APK_ORIGINAL_PATH} -> ${APK_NEW_PATH}"
          mv "${APK_ORIGINAL_PATH}" "${APK_NEW_PATH}"

          echo "Renaming ZIP: ${ZIP_ORIGINAL_PATH} -> ${ZIP_NEW_PATH}"
          mv "${ZIP_ORIGINAL_PATH}" "${ZIP_NEW_PATH}"

          echo "Final files for release:"
          ls -R artifacts/

          # אם תרצה להשתמש בשמות החדשים כ-outputs (לא חובה כאן כי אנו בונים אותם מחדש ב-softprops)
          # echo "apk_path=${APK_NEW_PATH}" >> $GITHUB_OUTPUT
          # echo "zip_path=${ZIP_NEW_PATH}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # הנתיבים כאן צריכים להתאים לשמות החדשים שנוצרו בשלב הקודם
          files: |
            artifacts/android/shamor-vezachor-${{ github.ref_name }}.apk
            artifacts/windows/shamor-vezachor-${{ github.ref_name }}.zip
          tag_name: ${{ github.ref_name }} # השתמש בשם התג המקורי
          name: Release ${{ github.ref_name }} # שם ה-Release (למשל "Release 0.6.0")
          body: | # תיאור אופציונלי ל-Release
            גרסה ${{ github.ref_name }} של שמור וזכור.
            קבצים מצורפים:
            - `shamor-vezachor-${{ github.ref_name }}.apk` (אנדרואיד)
            - `shamor-vezachor-${{ github.ref_name }}.zip` (חלונות)
          draft: true # <-- ה-Release ייווצר כטיוטה
          prerelease: false # הגדר כ-true אם זו גרסת טרום-שחרור